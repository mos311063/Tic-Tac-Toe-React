{"version":3,"sources":["components/tiles.js","components/bar.js","components/line.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Tile","state","fill","getCurrent","this","props","className","onClick","win","setState","checkWining","pos","width","height","fillOpacity","x","y","fontSize","React","Component","BarS","styled","div","bg","BarActiveX","BarActiveO","Bar","score","o","current","color","refresh","turnBar","Line","start_col","start_row","end_col","end_row","wining_pick","length","storke_color","stroke","strokeLinecap","strokeWidth","d","Main","init","count","game","Math","random","pick","symbol","tie","winning","checkWining_logic","player","index","check","forEach","num","includes","setTimeout","toggle","createTile","range","map","key","createLine","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1eda5be.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Tile extends React.Component {\n  state = {\n    fill: ''\n  }\n\n  render() {\n    const { getCurrent } = this.props\n    return (\n      <div\n        className=\"flex-1 bg-gray-100 mr-1 \"\n        onClick={() => {\n          if (this.state.fill === '') {\n            if (this.props.win === null) {\n              this.setState({ fill: getCurrent() })\n              this.props.checkWining(this.props.pos)\n            }\n          }\n        }}\n      >\n        <svg\n          className=\"fill-current text-teal-600 hover:bg-teal-100  \"\n          width=\"100\"\n          height=\"100\"\n        >\n          <g>\n            <rect\n              width=\"100\"\n              height=\"100\"\n              fill=\"transparent\"\n              fillOpacity=\"0\"\n              className=\"hover:bg-teal-600 \"\n            />\n            <text x=\"40\" y=\"60\" fontSize=\"35\">\n              {this.state.fill}\n            </text>\n          </g>\n        </svg>\n      </div>\n    )\n  }\n}\n\n// export default Tile;\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst BarS = styled.div`\n  background-color: ${props =>\n    props.bg === 'x' ? '#feb2b2' : props.bg === 'o' ? '#90cdf4' : '#81e6d9'};\n`\nconst BarActiveX = styled.div`\n  background-color: ${props => (props.bg === 'x' ? '#feb2b2' : '#e2e8f0')};\n`\n\nconst BarActiveO = styled.div`\n  background-color: ${props => (props.bg === 'o' ? '#90cdf4' : '#e2e8f0')};\n`\n\nconst turnBar = props => {\n  let color\n  if (props.win === 'x') {\n    color = 'bg-red-300'\n  } else if (props.win === 'o') {\n    color = 'bg-blue-300'\n  } else {\n    color = 'bg-teal-300'\n  }\n\n  if (props.win === null) {\n    return (\n      <span className=\"font-bold font-mono text-lg text-teal-600\">\n        {props.current} turn\n      </span>\n    )\n  } else {\n    return (\n      <span\n        className={`font-bold font-mono text-lg text-gray-100 win-bar ${color}`}\n        onClick={props.refresh}\n      >\n        {props.win !== 'Draw' ? props.win + ' won' : ' xo draw '}\n      </span>\n    )\n  }\n}\n\nconst Bar = props => {\n  const { x, o } = props.score\n  let current = props.current\n  if (props.win !== null) {\n    current = props.win\n  }\n  return (\n    <>\n      <div className=\"flex\">\n        <BarActiveX\n          className=\"flex-1 text-center p-1 font-bold mb-1 mr-1\"\n          bg={current}\n        >\n          x : {x === 0 ? '-' : x}\n        </BarActiveX>\n        <BarActiveO\n          className=\"flex-1 text-center p-1 font-bold mb-1 ml-1\"\n          bg={current}\n        >\n          o : {o === 0 ? '-' : o}\n        </BarActiveO>\n      </div>\n      <BarS className=\"text-center p-2  mb-1\" bg={current}>\n        {turnBar(props)}\n      </BarS>\n    </>\n  )\n}\nexport default Bar\n","import React from 'react'\n\nconst Line = props => {\n  let start_col = 10\n  let start_row = 50\n  let end_col = 50\n  let end_row = 295\n  start_col = 10\n  start_row = 250\n  end_col = 295\n  end_row = 250\n  if (props.wining_pick.length > 0) {\n    switch (props.wining_pick[0]) {\n      case 1:\n        switch (props.wining_pick[2]) {\n          case 3:\n            start_col = 10\n            start_row = 50\n            end_col = 295\n            end_row = 50\n            break\n          case 7:\n            start_col = 50\n            start_row = 10\n            end_col = 50\n            end_row = 295\n            break\n          case 9:\n            start_col = 30\n            start_row = 30\n            end_col = 280\n            end_row = 280\n            break\n          default:\n            break\n        }\n        break\n      case 2:\n        switch (props.wining_pick[2]) {\n          case 8:\n            start_col = 153\n            start_row = 10\n            end_col = 153\n            end_row = 295\n            break\n          default:\n            break\n        }\n        break\n      case 3:\n        switch (props.wining_pick[2]) {\n          case 7:\n            start_col = 20\n            start_row = 290\n            end_col = 290\n            end_row = 20\n            break\n          case 9:\n            start_col = 257\n            start_row = 10\n            end_col = 257\n            end_row = 295\n            break\n          default:\n            break\n        }\n        break\n      case 4:\n        switch (props.wining_pick[2]) {\n          case 6:\n            start_col = 10\n            start_row = 155\n            end_col = 295\n            end_row = 155\n            break\n          default:\n            break\n        }\n        break\n      case 7:\n        switch (props.wining_pick[2]) {\n          case 9:\n            start_col = 10\n            start_row = 257\n            end_col = 295\n            end_row = 257\n            break\n          default:\n            break\n        }\n        break\n      default:\n        break\n    }\n  }\n\n  const storke_color = props.win === 'x' ? '#feb2b2' : '#90cdf4'\n\n  return (\n    <svg className=\"line\">\n      <g fill=\"none\">\n        <path\n          stroke={storke_color}\n          strokeLinecap=\"butt\"\n          strokeWidth=\"7\"\n          d={`M${start_col} ${start_row} ${end_col} ${end_row}`}\n        />\n      </g>\n    </svg>\n  )\n}\nexport default Line\n","import React from 'react'\nimport Tile from './tiles'\nimport Bar from './bar'\nimport Line from './line'\n\nexport default class Main extends React.Component {\n  init = {\n    wining_pick: [],\n    win: null,\n    count: 0,\n    game: false,\n    current: Math.random() >= 0.5 ? 'x' : 'o',\n    x: { pick: [], symbol: 'x' },\n    o: { pick: [], symbol: 'o' }\n  }\n  score = { x: 0, o: 0, tie: 0 }\n\n  state = { ...this.init, game: true }\n\n  winning = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9],\n    [1, 5, 9],\n    [3, 5, 7]\n  ]\n\n  checkWining_logic = () => {\n    const player = this.state.current === 'x' ? this.state.x : this.state.o\n    for (let index = 0; index < this.winning.length; index++) {\n      let check = true\n      this.winning[index].forEach(num => {\n        if (!player.pick.includes(num)) check = false\n      })\n      if (check) {\n        this.setState({ wining_pick: this.winning[index] })\n        return true\n      }\n    }\n    return false\n  }\n\n  refresh = () => {\n    this.setState(this.init, () => {\n      this.setState({ game: true, current: Math.random() >= 0.5 ? 'x' : 'o' })\n    })\n  }\n\n  checkWining = pos => {\n    const player = this.state.current === 'x' ? this.state.x : this.state.o\n    this.setState(\n      {\n        [player.symbol]: {\n          ...player,\n          pick: [...player.pick, pos]\n        }\n      },\n      () => {\n        if (this.checkWining_logic()) {\n          setTimeout(() => {\n            this.score[player.symbol]++\n            this.setState({ win: player.symbol })\n          }, 100)\n        } else if (this.state.count > 8) {\n          setTimeout(() => {\n            this.setState({ win: 'Draw' })\n          }, 100)\n        } else {\n          this.toggle()\n        }\n      }\n    )\n  }\n\n  toggle = () => {\n    if (this.state.current === 'x') {\n      this.setState({ current: 'o' })\n    } else {\n      this.setState({ current: 'x' })\n    }\n  }\n\n  getCurrent = () => {\n    this.setState(function(state, props) {\n      return { count: state.count + 1 }\n    })\n    return this.state.current\n  }\n\n  createTile = range => {\n    return (\n      <div className=\"flex bg-gray-300 mb-1\">\n        {range.map(num => {\n          return (\n            <Tile\n              key={'tile' + num}\n              getCurrent={this.getCurrent}\n              pos={num}\n              checkWining={this.checkWining}\n              win={this.state.win}\n            />\n          )\n        })}\n      </div>\n    )\n  }\n\n  createLine = () => {\n    return this.state.wining_pick.length > 0 ? (\n      <Line wining_pick={this.state.wining_pick} win={this.state.win} />\n    ) : null\n  }\n\n  render() {\n    return this.state.game ? (\n      <div className=\"absolute shadow-lg inset-auto p-10 bg-gray-200\">\n        <p className=\"mb-1\">\n          Tic Tac Toe by\n          <a\n            href=\"https://github.com/mos311063\"\n            className=\"text-gray-600 hover:text-blue-700 ml-1\"\n          >\n            Moss\n          </a>\n        </p>\n        <Bar\n          current={this.state.current}\n          score={this.score}\n          win={this.state.win}\n          refresh={this.refresh}\n        />\n        {this.createLine()}\n        {this.createTile([1, 2, 3])}\n        {this.createTile([4, 5, 6])}\n        {this.createTile([7, 8, 9])}\n        <div className=\"flex  mt-2 p-2 content-center justify-center\">\n          <button\n            onClick={() => this.refresh()}\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            re-game\n          </button>\n        </div>\n      </div>\n    ) : (\n      <button\n        onClick={() => this.setState({ game: true })}\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-5 mx-2\"\n      >\n        tic tac toe\n      </button>\n    )\n  }\n}\n","import React from \"react\";\nimport Main from \"./components/main\";\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/tailwind.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}